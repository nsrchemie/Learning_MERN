{"version":3,"sources":["../server/server.js"],"names":["install","app","use","static","json","process","env","NODE_ENV","webpack","require","webpackDevMiddleware","webpackHotMiddleware","config","entry","push","plugins","HotModuleReplacementPlugin","bundler","noInfo","log","console","get","req","res","db","collection","find","toArray","then","issues","metadata","total_count","length","_metadata","records","catch","error","status","message","post","newIssue","body","created","Date","err","validateIssue","insertOne","result","_id","insertedId","limit","next","connect","connection","listen"],"mappings":"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","file":"server.js","sourcesContent":["import express from 'express';\nimport bodyParser from 'body-parser';\nimport { MongoClient } from 'mongodb';\nimport Issue from './issue.js';\nimport 'babel-polyfill';\nimport SourceMapSupport from 'source-map-support';\nSourceMapSupport.install();\n\nconst app = express();\napp.use(express.static('static'));\napp.use(bodyParser.json());\n\nif (process.env.NODE_ENV !== 'production') {\n const webpack = require('webpack');\n const webpackDevMiddleware = require('webpack-dev-middleware');\n const webpackHotMiddleware = require('webpack-hot-middleware');\n\nconst config = require('../webpack.config');\nconfig.entry.app.push('webpack-hot-middleware/client',\n 'webpack/hot/only-dev-server');\nconfig.plugins.push(new webpack.HotModuleReplacementPlugin());\n\nconst bundler = webpack(config);\napp.use(webpackDevMiddleware(bundler, { noInfo: true }));\napp.use(webpackHotMiddleware(bundler, { log: console.log }));\n}\n\napp.get('/api/issues', (req, res) => {\n  db.collection('issues').find().toArray().then(issues => {\n    const metadata = { total_count: issues.length };\n    res.json({ _metadata: metadata, records: issues })\n  }).catch(error => {\n    console.log(error);\n    res.status(500).json({ message: `Internal Server Error: ${error}` });\n  });\n});\n\napp.post('/api/issues', (req, res) => {\n  const newIssue = req.body;\n  newIssue.created = new Date();\n  if (!newIssue.status)\n    newIssue.status = 'New';\n\n  const err = Issue.validateIssue(newIssue)\n  if (err) {\n    res.status(422).json({ message: `Invalid request: ${err}` });\n    return;\n  }\n\n  db.collection('issues').insertOne(newIssue).then(result =>\n    db.collection('issues').find({ _id: result.insertedId }).limit(1).next()\n  ).then(newIssue => {\n    res.json(newIssue);\n  }).catch(error => {\n    console.log(error);\n    res.status(500).json({ message: `Internal Server Error: ${error}` });\n  });\n});\n\nlet db;\nMongoClient.connect('mongodb://localhost/issuetracker').then(connection => {\n  db = connection;\n  app.listen(3000, () => {\n    console.log('App started on port 3000');\n  });\n}).catch(error => {\n  console.log('ERROR:', error);\n});\n\n\n"]}